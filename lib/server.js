// Generated by CoffeeScript 1.3.3
(function() {
  var ROOT_PATH, Server, TEMPLATES, fs, http, jade, load_template_sync, mime, path, serve_directory_listing, serve_static_file,
    __slice = [].slice;

  http = require('http');

  fs = require('fs');

  path = require('path');

  mime = require('mime');

  jade = require('jade');

  path = require('path');

  ROOT_PATH = path.join(__dirname, '../');

  load_template_sync = function(rel_path) {
    var filepath, template_data;
    filepath = path.join(ROOT_PATH, rel_path);
    template_data = fs.readFileSync(filepath, 'utf-8');
    return jade.compile(template_data, {
      filename: filepath
    });
  };

  TEMPLATES = {
    directory_listing: load_template_sync('assets/directory_listing.jade'),
    error404: load_template_sync('assets/error404.jade')
  };

  serve_directory_listing = function(response, directory_path) {
    response.writeHead(404);
    return fs.readdir(directory_path, function(err, files) {
      var directory_listing;
      directory_listing = TEMPLATES.directory_listing({
        directory_path: directory_path,
        files: files
      });
      return response.end(directory_listing);
    });
  };

  serve_static_file = function(response, filepath) {
    var content_type, file, stat;
    try {
      if (path.existsSync(filepath)) {
        stat = fs.statSync(filepath);
        if (stat.isDirectory()) {
          return serve_directory_listing(response, filepath);
        } else {
          content_type = mime.lookup(filepath);
          response.writeHead(200, {
            'content-type': content_type
          });
          file = fs.createReadStream(filepath);
          return file.pipe(response);
        }
      } else {
        response.writeHead(404);
        return response.end(TEMPLATES.error404({
          filepath: filepath
        }));
      }
    } catch (error) {
      response.writeHead(500);
      return response.end("Error " + error_msg);
    }
  };

  Server = (function() {

    function Server(host, port, builder) {
      this.host = host;
      this.port = port;
      this.builder = builder;
    }

    Server.prototype.handle = function(request, response) {
      var failure_callback, filepath, serve_file, url, url_base;
      response.setHeader("Access-Control-Allow-Origin", "*");
      url = request.url;
      console.log('GET ', url);
      url_base = url.split('?', 1);
      filepath = '.' + url_base;
      serve_file = function(filepath) {
        return serve_static_file(response, filepath);
      };
      failure_callback = function(error_msg) {
        response.writeHead(404);
        return response.end(TEMPLATES.error404({
          filepath: filepath,
          error_msg: error_msg
        }));
      };
      return this.builder.build(filepath, serve_file, failure_callback);
    };

    Server.prototype.run = function() {
      var server,
        _this = this;
      server = http.createServer(function() {
        var args;
        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        return _this.handle.apply(_this, args);
      });
      return server.listen(this.port);
    };

    return Server;

  })();

  module.exports = Server;

}).call(this);
