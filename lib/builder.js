// Generated by CoffeeScript 1.3.3
(function() {
  var ASSET_PATH, Builder, DEFAULT_MAKEFILE_PATH, ENVIRONMENT, NODE_BIN_PATH, child_process, extend, growl, path, rjust, style, terminal, _ref,
    __slice = [].slice;

  child_process = require('child_process');

  path = require('path');

  growl = require('growl');

  style = require('./style');

  terminal = require('color-terminal');

  rjust = require('./utils').rjust;

  NODE_BIN_PATH = "./node_modules/.bin/";

  extend = function() {
    var c, k, obj, objs, v, _i, _len;
    c = arguments[0], objs = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    for (_i = 0, _len = objs.length; _i < _len; _i++) {
      obj = objs[_i];
      for (k in obj) {
        v = obj[k];
        c[k] = v;
      }
    }
    return c;
  };

  ASSET_PATH = path.join(__dirname, '../assets/');

  ENVIRONMENT = extend({}, process.env, {
    'ASSET_PATH': ASSET_PATH
  });

  ENVIRONMENT.PATH = ((_ref = ENVIRONMENT.PATH) != null ? _ref : "") + ":" + NODE_BIN_PATH;

  DEFAULT_MAKEFILE_PATH = path.join(__dirname, '../assets/Makefile');

  Builder = (function() {

    function Builder(parameters) {
      this.parameters = parameters;
    }

    Builder.prototype.build = function(target, success, failure) {
      var error_msg, make_argv, make_process,
        _this = this;
      make_argv = ['-f', DEFAULT_MAKEFILE_PATH, target];
      ENVIRONMENT.build_path = this.parameters.build_path;
      if (this.parameters.makefile_path != null) {
        ENVIRONMENT.extra_makefile = this.parameters.makefile_path;
      }
      make_process = child_process.spawn('make', make_argv, {
        env: ENVIRONMENT
      });
      error_msg = "";
      make_process.stderr.on("data", function(data) {
        return error_msg += data.toString();
      });
      return make_process.on('exit', function(code) {
        if (code === 0) {
          return success(target);
        } else {
          return failure(target, error_msg.trim());
        }
      });
    };

    Builder.prototype.build_targets = function(targets, success, failure) {
      var build_failure, build_success, pop_and_build_one,
        _this = this;
      build_success = function(target) {
        terminal.color({
          foreground: "green"
        }).write("[ OK ]").reset().nl();
        return pop_and_build_one();
      };
      build_failure = function(target, error_msg) {
        terminal.color({
          foreground: "red"
        }).write("[FAIL]").reset().nl();
        terminal.write(error_msg);
        return failure();
      };
      pop_and_build_one = function() {
        var target;
        if (target = targets.shift()) {
          terminal.write(rjust(target, 30));
          return _this.build(target, build_success, build_failure);
        } else {
          return success();
        }
      };
      return pop_and_build_one();
    };

    return Builder;

  })();

  module.exports = Builder;

}).call(this);
