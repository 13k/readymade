// Generated by CoffeeScript 1.3.3
(function() {
  var ActionParser, ljust, optimist;

  optimist = require('optimist');

  ljust = function(s, n) {
    var i, res, _i, _ref;
    res = s;
    for (i = _i = _ref = s.length; _ref <= n ? _i < n : _i > n; i = _ref <= n ? ++_i : --_i) {
      res += " ";
    }
    return res;
  };

  ActionParser = (function() {

    function ActionParser(actions) {
      this.actions = actions;
    }

    ActionParser.prototype.parse = function(argv) {
      var action, action_id, options;
      if (argv == null) {
        argv = process.argv.slice(2);
      }
      try {
        if (argv.length === 0) {
          throw "You need to specify an action.";
        } else {
          action_id = argv.shift();
          action = this.actions[action_id];
          if (action != null) {
            options = action.options.call(optimist(argv)).argv;
            return action.handle.call(this, options);
          } else {
            throw action_id + " is not a valid action.";
          }
        }
      } catch (error) {
        return this.help("! " + error);
      }
    };

    ActionParser.prototype.help_on_action = function(action_id) {
      var action, argv;
      action = this.actions[action_id];
      if (action != null) {
        argv = process.argv.slice(2);
        return console.log("\n", action.options.call(optimist(argv)).help());
      } else {
        throw "Action " + action_id + " not available";
      }
    };

    ActionParser.prototype.help = function(msg) {
      var k, v, _ref, _results;
      if (msg != null) {
        console.log("-----------------------------------------------");
        console.log(msg);
        console.log("-----------------------------------------------\n");
      }
      console.log("Available actions are");
      _ref = this.actions;
      _results = [];
      for (k in _ref) {
        v = _ref[k];
        _results.push(console.log("  ", ljust(k, 25), v.description));
      }
      return _results;
    };

    return ActionParser;

  })();

  module.exports = function(actions) {
    return new ActionParser(actions);
  };

}).call(this);
